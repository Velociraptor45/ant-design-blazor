@using AntDesign.Core.JsInterop.Modules.Components
@using AntDesign.Internal
@using AntDesign.Select.Internal
@inherits AntDesignTestBase

@code{
    
    record Person(int Id, string Name);
    
    List<Person> _persons = new List<Person>
    {
        new Person(1, "John"),
        new Person(2, "Lucy"),
        new Person(3, "Jack"),
        new Person(4, "Emily"),
    };

    public Select_SearchInput_Tests()
    {
        JSInterop.Setup<AntDesign.JsInterop.DomRect>(JSInteropConstants.GetBoundingClientRect, _ => true)
            .SetResult(new AntDesign.JsInterop.DomRect());
        JSInterop.SetupVoid(JSInteropConstants.AddPreventKeys, _ => true).SetVoidResult();
        JSInterop.SetupVoid(JSInteropConstants.DomMainpulationHelper.Focus, _ => true).SetVoidResult();
        JSInterop.SetupVoid(JSInteropConstants.AddPreventEnterOnOverlayVisible, _ => true).SetVoidResult();
        JSInterop.Setup<OverlayPosition>(JSInteropConstants.OverlayComponentHelper.AddOverlayToContainer, _ => true)
            .SetResult(new OverlayPosition());
    }

    [Fact]
    public void Set_input_value_when_search_input_provided()
    {
        // Act
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="J">
            </AntDesign.Select>
        );
        
        
        // Assert
        var input = cut.Find(".ant-select-selection-search-input");
        var inputValue = input.GetAttribute("value");
        inputValue.Should().Be("J");
    }

    [Fact]
    public void Update_input_value_when_search_input_updated()
    {
        // Arrange
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="J">
            </AntDesign.Select>
        );
        
        // Act
        cut.SetParametersAndRender(param => param.Add(p => p.SearchInput, "Jo"));
        
        // Assert
        var input = cut.Find(".ant-select-selection-search-input");
        var inputValue = input.GetAttribute("value");
        inputValue.Should().Be("Jo");
    }

    [Fact]
    public async Task Filter_items_when_search_input_updated_while_in_focus()
    {
        // Arrange
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="J">
            </AntDesign.Select>
        );
        
        var trigger = cut.FindComponent<OverlayTrigger>();
        await cut.InvokeAsync(() => trigger.Instance.OnVisibleChange.InvokeAsync(false));
        
        // Act
        cut.SetParametersAndRender(param => param.Add(p => p.SearchInput, "Jo"));
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(1);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("John");
    }

    [Fact]
    public async Task Filter_items_when_search_input_updated_while_not_in_focus()
    {
        // Arrange
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="J">
            </AntDesign.Select>
        );
        
        // Act
        cut.SetParametersAndRender(param => param.Add(p => p.SearchInput, "Jo"));
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(1);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("John");
    }

    [Fact]
    public async Task Filter_items_on_first_render()
    {
        // Act
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="Jo">
            </AntDesign.Select>
        );
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(1);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("John");
    }

    [Theory]
    [InlineData("default")]
    [InlineData("multiple")]
    public async Task Reset_filtered_items_on_setting_empty_search_input(string mode)
    {
        // Arrange
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               Mode="@mode"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="Jo">
            </AntDesign.Select>
        );
        
        // Act
        cut.SetParametersAndRender(param => param.Add(p => p.SearchInput, string.Empty));
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(4);
    }

    [Fact]
    public async Task Will_not_filter_items_when_search_input_is_null()
    {
        // Act
        string? input = null;
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="@input">
            </AntDesign.Select>
        );
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(4);
    }

    [Fact]
    public async Task Will_not_reset_filtered_items_when_exiting_focus()
    {
        // Arrange
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="Jo">
            </AntDesign.Select>
        );
        var trigger = cut.FindComponent<OverlayTrigger>();
        
        // Act
        await cut.InvokeAsync(() => trigger.Instance.OnVisibleChange.InvokeAsync(false));
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(1);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("John");
    }

    [Fact]
    public async Task Will_not_reset_selected_item_when_search_input_changes()
    {
        // Arrange
        int value = 0;
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               Mode="default"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               @bind-value="@value"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="Lu">
            </AntDesign.Select>
        );
        
        cut.FindAll(".ant-select-item-option")
            .Single(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .Click();
        value.Should().Be(2);
        
        // Act
        cut.SetParametersAndRender(param => param.Add(p => p.SearchInput, "Jo"));
        
        // Assert
        value.Should().Be(2);
        
        var input = cut.Find(".ant-select-selection-search-input");
        var inputValue = input.GetAttribute("value");
        inputValue.Should().Be("Jo");
        
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(1);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("John");
    }

    [Fact]
    public async Task Will_not_reset_selected_items_when_search_input_changes()
    {
        // Arrange
        IEnumerable<int> values = new List<int>();
        var cut = Render<AntDesign.Select<int, Person>>(
            @<AntDesign.Select DataSource="@_persons"
                               Mode="multiple"
                               LabelName="@nameof(Person.Name)"
                               ValueName="@nameof(Person.Id)"
                               EnableSearch="true"
                               @bind-values="@values"
                               TItem="Person"
                               TItemValue="int"
                               SearchInput="Lu">
            </AntDesign.Select>
        );
        
        cut.Find(".ant-select-item-option").Click();
        values.Should().HaveCount(1);
        
        // Act
        cut.SetParametersAndRender(param => param.Add(p => p.SearchInput, "Jo"));
        
        // Assert
        values.Should().HaveCount(1);
        
        var input = cut.Find(".ant-select-selection-search-input");
        var inputValue = input.GetAttribute("value");
        inputValue.Should().Be("Jo");
        
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(1);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("John");
    }
    
    class Tag
    {
        public string Value { get; set; }
        public string Label { get; set; }
    }

    List<Tag> _tags = new List<Tag>
    {
        new Tag() { Value = "first", Label = "First" },
        new Tag() { Value = "second", Label = "Second" },
        new Tag() { Value = "third", Label = "Third" }
    };

    [Fact]
    public async Task Filter_items_and_create_tag_when_changing_search_input()
    {
        // Arrange
        var cut = Render<AntDesign.Select<string, Tag>>(
            @<AntDesign.Select DataSource="@_tags"
                               Mode="tags"
                               LabelName="@nameof(Tag.Label)"
                               ValueName="@nameof(Tag.Value)"
                               EnableSearch="true"
                               TItem="Tag"
                               TItemValue="string"
                               SearchInput="Fi">
            </AntDesign.Select>
        );
        var trigger = cut.FindComponent<OverlayTrigger>();
        
        // Act
        await cut.InvokeAsync(() => trigger.Instance.OnVisibleChange.InvokeAsync(false));
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(2);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("First");
        items[1].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("Fi");
    }

    [Fact]
    public async Task Reset_filtered_items_and_clear_custom_tag_on_setting_empty_search_input()
    {
        // Arrange
        var cut = Render<AntDesign.Select<string, Tag>>(
            @<AntDesign.Select DataSource="@_tags"
                               Mode="tags"
                               LabelName="@nameof(Tag.Label)"
                               ValueName="@nameof(Tag.Value)"
                               EnableSearch="true"
                               TItem="Tag"
                               TItemValue="string"
                               SearchInput="Fi">
            </AntDesign.Select>
        );
        var trigger = cut.FindComponent<OverlayTrigger>();
        
        // Act
        cut.SetParametersAndRender(param => param.Add(p => p.SearchInput, string.Empty));
        
        // Assert
        var items = cut.FindAll(".ant-select-item-option")
            .Where(x => !x.Attributes["style"]?.Value.Trim().Contains("display:none") ?? true)
            .ToList();
        items.Should().HaveCount(3);
        items[0].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("First");
        items[1].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("Second");
        items[2].GetElementsByClassName("ant-select-item-option-content")[0].TextContent.Trim().Should().Be("Third");
    }
    
}